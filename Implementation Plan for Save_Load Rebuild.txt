Revised Implementation Plan
Phase 1: Core Infrastructure (4-5 days)
1. Create SaveQueueManager
* Implement transaction-based queue system with prioritization
* Add retry mechanism with exponential backoff
* Remove all migration-related code
* Replace the simple saveInProgress/saveQueued flags in KnackJavascript4r.js
1. Create CardTopicRelationshipManager
* Build robust relationship management between cards and topics
* Add verification and auto-repair functionality
* Replace the simple type detection in KnackJavascript4r.js
1. Enhance MessageHandler
* Implement reliable communication with parent window
* Add transaction status notifications
* Replace the current message handling in KnackJavascript4r.js
Phase 2: Data Model Implementation (3-4 days)
1. Implement UnifiedDataManager
* Use schema version 2.0 without migration paths
* Add subject/topic color management
* Replace legacy color handling in KnackJavascript4r.js
1. Build verification system
* Implement data consistency checks
* Add automated relationship repair
* Replace the basic verifyDataSave in KnackJavascript4r.js
Phase 3: Integration (2-3 days)
1. Update App.js
* Replace current save/load methods with new system
* Integrate with new message handler
1. Update KnackJavascript4r.js
* Remove all legacy code paths
* Implement direct integration with SaveQueueManager
* Simplify topic shell creation logic
* Remove redundant fallback methods like legacySaveFlashcardUserData
1. Refactor error handling
* Implement centralized error tracking
* Add consistent error handling across both components
Files to Create/Modify
New Files:
1. src/services/SaveQueueManager.js
* Core transaction management system
* Replaces the simple queue in KnackJavascript4r.js
1. src/services/CardTopicRelationshipManager.js
* Handles all card-topic relationships
* Replaces type detection in KnackJavascript4r.js
1. src/services/MessageHandler.js
* Enhanced communication with Knack integration
* Replaces direct postMessage calls in KnackJavascript4r.js
1. src/services/SaveVerificationService.js
* Verify save operations and fix issues
* Replaces verifyDataSave in KnackJavascript4r.js
Files to Modify:
1. src/App.js
* Update save and load functions
* Integrate with new services
1. KnackJavascript4r.js
* Complete overhaul to use new services
* Remove redundant functions and simplify code
* Implement direct integration with SaveQueueManager
* Remove all legacy fallback methods
* Streamline topic shell creation
* Update message handling to work with new MessageHandler
1. src/utils/UnifiedDataModel.js
* Update to schema version 2.0
* Remove migration functions
1. src/services/UnifiedDataService.js
* Integrate with SaveQueueManager
* Remove migration-related code
GitHub Branch Strategy
1. Create a new branch from main called feature/save-load-rebuild
1. Implement the new services without any migration paths
1. Completely refactor KnackJavascript4r.js to use the new services
1. Test thoroughly in the isolated branch
1. When ready, create a PR to merge back to main
Implementation Sequence
1. Start by creating the SaveQueueManager as the foundation
1. Build the CardTopicRelationshipManager and MessageHandler
1. Update UnifiedDataModel and UnifiedDataService
1. Create SaveVerificationService
1. Overhaul KnackJavascript4r.js to use the new services
1. Update App.js to integrate with everything
1. Remove all redundant code and legacy pathways
This streamlined approach eliminates migration concerns and allows for a complete rebuild of the save/load functionality with a much cleaner architecture. The aggressive reformatting will significantly reduce code complexity while improving reliability.